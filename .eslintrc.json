{
  "root": true,
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json", // tells parser relative path of tsconfig.json
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12,
    "sourceType": "module"
  },

  // all plugins (eslint-plugin-xxx) go here:
  "plugins": [
    "@typescript-eslint",
    "@next/eslint-plugin-next", // https://github.com/vercel/next.js/blob/canary/packages/eslint-plugin-next/lib/index.js
    "jsx-a11y"
  ],
  "ignorePatterns": [".eslintrc.json"],

  // all configs (eslint-config-xxx) go here:
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking", // contains rules that specifically require type information
    "plugin:@next/next/recommended",
    "next", // https://github.com/vercel/next.js/blob/canary/packages/eslint-config-next/package.json
    "next/core-web-vitals"
  ],
  "rules": {
    "react/jsx-filename-extension": [
      1,
      {
        "extensions": [".tsx"]
      }
    ],
    "react/sort-comp": [0],
    "react/jsx-props-no-spreading": [0],
    "react/jsx-one-expression-per-line": [0],
    "jsx-a11y/anchor-is-valid": [0],
    "no-console": [
      "error",
      {
        "allow": ["warn", "error", "info"]
      }
    ],
    "no-var": "error",
    "radix": "error",
    "semi": "error",
    "quotes": [
      "error",
      "single",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ],
    "prefer-arrow-callback": 1,
    "default-case": "warn",
    "no-trailing-spaces": 1,
    "jsx-quotes": ["error", "prefer-double"],
    "max-len": [
      "error",
      {
        "code": 120,
        "tabWidth": 2,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreComments": true,
        "ignoreTrailingComments": true,
        "ignoreUrls": true
      }
    ],
    "no-bitwise": 2,
    "no-multiple-empty-lines": 2,
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],
    "no-debugger": 1,
    "no-duplicate-imports": "error",
    "no-empty": "error",
    "no-eval": "error",
    "react/jsx-boolean-value": ["error", "always"],
    "@typescript-eslint/ban-types": 0,
    "@typescript-eslint/no-explicit-any": 0,
    "@typescript-eslint/explicit-module-boundary-types": 0,
    "@typescript-eslint/no-unused-vars": [
      "error",
      { "argsIgnorePattern": "^_", "ignoreRestSiblings": true }
    ],
    "import/order": [
      "error",
      {
        "newlines-between": "always",
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        },
        "pathGroupsExcludedImportTypes": ["builtin"],
        "pathGroups": [
          {
            "pattern": "^(?!(common|@lick|@server|~src|\\.)).+",
            "group": "external"
          },
          {
            "pattern": "^(@lick|@server)",
            "group": "internal"
          },
          {
            "pattern": "^(common)",
            "group": "internal",
            "position": "after"
          },
          {
            "pattern": "^(~src)",
            "group": "parent"
          },
          {
            "pattern": "^\\.+",
            "group": "sibling"
          }
        ]
      }
    ],
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "selector": "default",
        "format": ["camelCase", "UPPER_CASE", "PascalCase", "snake_case"],
        "leadingUnderscore": "allowSingleOrDouble"
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE", "PascalCase", "snake_case"],
        "leadingUnderscore": "allowSingleOrDouble"
      },
      {
        "selector": "parameter",
        "format": ["camelCase", "PascalCase", "snake_case"],
        "leadingUnderscore": "allowSingleOrDouble"
      },
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": true
        }
      },
      {
        "selector": "typeAlias",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^T[A-Z]",
          "match": true
        }
      },
      {
        "selector": "enum",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^E[A-Z]",
          "match": true
        }
      }
    ],
    "@typescript-eslint/no-implicit-dependencies": 0
  }
}
